server:
  port: 8082
spring:
  application:
    name: notification-service
  datasource:
    password: password
    url: jdbc:postgresql://localhost:5432/notification
    username: amigoscode
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  zipkin:
    base-url: http://localhost:9411
  rabbitmq:
    addresses: localhost:5672
  kafka:
    bootstrap-servers: localhost:9092
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
    enabled: false
rabbitmq:
  exchanges:
    internal: internal.exchange
  queues:
    notification: notification.queue
  routing-keys:
    internal-notification: internal.notification.routing-key
messaging:
  broker: kafka
#  broker: rabbitmq
retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.0
  max-attempts: 3
  sleep-time-ms: 2000
kafka-config:
  # hostnames from docker compose file
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8085
  topic-name: notification-topic
  topic-names-to-create:
    - notification-topic
  number-of-partitions: 3
  replication-factor: 3
kafka-consumer-config:
  keyDeserializer: org.apache.kafka.common.serialization.LongDeserializer
  valueDeserializer: io.confluent.kafka.serializers,KavkaAvroDeserializer
  consumerGroupId: notification-topic-consumer
  autoOffsetReset: earliest
  specificAvroReaderKey: specific.avro.reader
  specificAvroReader: true
  batchListener: true
  autoStartup: false
  concurrencyLevel: 3
  sessionTimeoutMs: 10000
  heartBeatInterval: 3000
  maxPollIntervalMs: 300000
  maxPollRecords: 500
  maxPartitionFetchBytesDefault: 1048576
  maxPartitionFetchBytesBoostFactor: 1
  pollTimeoutMs: 150